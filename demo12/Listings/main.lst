C51 COMPILER V9.60.0.0   MAIN                                                              01/22/2025 01:07:50 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          #include <stdio.h>
   3          
   4          sbit sda = P0 ^ 1;
   5          sbit scl = P0 ^ 2;
   6          
   7          #define GXHT3L_ADDR_WRITE 0x44<<1
   8          #define GXHT3L_ADDR_READ (0x44<<1)+1
   9          
  10          void Delay10us() {
  11   1          unsigned char i;
  12   1          i = 2;
  13   1          while (--i);
  14   1      }
  15          
  16          void i2c_start() {
  17   1          scl = 1;
  18   1          sda = 1;
  19   1          Delay10us();
  20   1          sda = 0;
  21   1      }
  22          
  23          void i2c_stop() {
  24   1          scl = 1;
  25   1          sda = 0;
  26   1          Delay10us();
  27   1          sda = 1;
  28   1      }
  29          
  30          void i2c_write_bit(unsigned char databit) {
  31   1          scl = 0;
  32   1          if (databit == 1)
  33   1              sda = 1;
  34   1          else
  35   1              sda = 0;
  36   1          Delay10us();
  37   1          scl = 1;
  38   1          Delay10us();
  39   1      }
  40          
  41          void i2c_write_byte(unsigned char datasend) {
  42   1          int i = 0;
  43   1          for (i = 0; i < 8; ++i) {
  44   2              if (datasend & 0x80)
  45   2                  i2c_write_bit(1);
  46   2              else
  47   2                  i2c_write_bit(0);
  48   2              datasend = datasend << 1;
  49   2          }
  50   1      }
  51          
  52          unsigned char i2c_read_bit() {
  53   1          unsigned char databit = 0;
  54   1          scl = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              01/22/2025 01:07:50 PAGE 2   

  55   1          Delay10us();
  56   1          scl = 1;
  57   1          Delay10us();
  58   1          if (sda == 1)
  59   1              databit = 1;
  60   1          else
  61   1              databit = 0;
  62   1          return databit;
  63   1      }
  64          
  65          unsigned char i2c_read_byte() {
  66   1          unsigned char value = 0;
  67   1          unsigned char i = 0;
  68   1          sda = 1;
  69   1          for (i = 0; i < 8; ++i) {
  70   2              if (i2c_read_bit() == 1)
  71   2                  value = value | 0x01;
  72   2              else
  73   2                  value = value | 0x00;
  74   2              if (i < 7) {
  75   3                  value = value << 1;
  76   3              }
  77   2          }
  78   1          scl = 0;
  79   1          Delay10us();
  80   1          return value;
  81   1      }
  82          
  83          void i2c_ack() {
  84   1          scl = 0;
  85   1          sda = 0;
  86   1          Delay10us();
  87   1          scl = 1;
  88   1          Delay10us();
  89   1          scl = 0;
  90   1      }
  91          
  92          void i2c_nack() {
  93   1          scl = 0;
  94   1          sda = 1;
  95   1          Delay10us();
  96   1          scl = 1;
  97   1          Delay10us();
  98   1          scl = 0;
  99   1      }
 100          
 101          void i2c_wait_ack() {
 102   1          unsigned char time = 0;
 103   1          scl = 0;
 104   1          sda = 1;
 105   1          Delay10us();
 106   1          scl = 1;
 107   1          Delay10us();
 108   1          while (sda) {
 109   2              Delay10us();
 110   2              time++;
 111   2              if (time > 100) break;
 112   2          }
 113   1          scl = 0;
 114   1          Delay10us();
 115   1      }
 116          
C51 COMPILER V9.60.0.0   MAIN                                                              01/22/2025 01:07:50 PAGE 3   

 117          void gxht30_init() {
 118   1          i2c_start();
 119   1          i2c_write_byte(GXHT3L_ADDR_WRITE);
 120   1          i2c_wait_ack();
 121   1          i2c_write_byte(0x22);
 122   1          i2c_wait_ack();
 123   1          i2c_write_byte(0x20);
 124   1          i2c_wait_ack();
 125   1          i2c_stop();
 126   1      }
 127          
 128          void gxht30_read_mode() {
 129   1          i2c_start();
 130   1          i2c_write_byte(GXHT3L_ADDR_WRITE);
 131   1          i2c_wait_ack();
 132   1          i2c_write_byte(0xE0);
 133   1          i2c_wait_ack();
 134   1          i2c_write_byte(0x00);
 135   1          i2c_wait_ack();
 136   1          i2c_stop();
 137   1          Delay10us();
 138   1      }
 139          
 140          #define POLYNOMIAL 0x31
 141          
 142          unsigned char gxht30_crc8(unsigned char *crcdata, unsigned char nbrOfBytes) {
 143   1          unsigned char Bit;
 144   1          unsigned char crc = 0xFF;
 145   1          unsigned char byteCtr;
 146   1          for (byteCtr = 0; byteCtr < nbrOfBytes; byteCtr++) {
 147   2              crc ^= (crcdata[byteCtr]);
 148   2              for (Bit = 8; Bit > 0; --Bit) {
 149   3                  if (crc & 0x80)
 150   3                      crc = (crc << 1) ^ POLYNOMIAL;
 151   3                  else
 152   3                      crc = (crc << 1);
 153   3              }
 154   2          }
 155   1          return crc;
 156   1      }
 157          
 158          void gxht30_read_data() {
 159   1          unsigned short tem, hum;
 160   1          int index = 0;
 161   1          float temperature, humidity;
 162   1          unsigned char buffer[6];
 163   1          i2c_start();
 164   1          i2c_write_byte(GXHT3L_ADDR_READ);
 165   1          i2c_wait_ack();
 166   1          for (index = 0; index < 6; ++index) {
 167   2              buffer[index] = i2c_read_byte();
 168   2              if (index == 5)
 169   2                  i2c_nack();
 170   2              else
 171   2                  i2c_ack();
 172   2          }
 173   1          i2c_stop();
 174   1          if (gxht30_crc8(buffer, 2) != buffer[2]) {
 175   2              printf("crc error\n");
 176   2              return;
 177   2          }
 178   1          if (gxht30_crc8(&buffer[3], 2) != buffer[5]) {
C51 COMPILER V9.60.0.0   MAIN                                                              01/22/2025 01:07:50 PAGE 4   

 179   2              printf("crc error\n");
 180   2              return;
 181   2          }
 182   1          tem = ((buffer[0] << 8) | buffer[1]);
 183   1          hum = ((buffer[3] << 8) | buffer[4]);
 184   1      
 185   1          temperature = (175.0 * (float) tem / 65535.0 - 45.0);// T = -45 + 175 * tem / (2^16-1)
 186   1          humidity = (100.0 * (float) hum / 65535.0);// RH = hum*100 / (2^16-1)
 187   1          printf("temperature=%f humidity=%f\n", temperature, humidity);
 188   1      }
 189          
 190          void uart_init() {
 191   1          PCON &= 0x7F;
 192   1          SCON = 0x50;
 193   1          TMOD &= 0x0F;
 194   1          TMOD |= 0x20;
 195   1          TL1 = 0xFD;
 196   1          TH1 = 0xFD;
 197   1          ET1 = 0;
 198   1          TR1 = 1;
 199   1      }
 200          
 201          char putchar(char dat) {
 202   1          SBUF = dat;
 203   1          while (!TI);
 204   1          TI = 0;
 205   1          return dat;
 206   1      }
 207          
 208          void delay_ms(unsigned int xms)   //@12MHz
 209          {
 210   1          unsigned int i, j;
 211   1          for (i = xms; i > 0; i--) {
 212   2              for (j = 124; j > 0; j--) {}
 213   2          }
 214   1      }
 215          
 216          void main() {
 217   1          uart_init();
 218   1          gxht30_init();
 219   1          while (1) {
 220   2              delay_ms(3000);
 221   2              gxht30_read_mode();
 222   2              gxht30_read_data();
 223   2          }
 224   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    638    ----
   CONSTANT SIZE    =     39    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
